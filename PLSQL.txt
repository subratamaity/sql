1: DECLARE

	YEAR number(4);

BEGIN
	DBMS_OUTPUT.PUT_LINE('ENTER THE YEAR\n');
	YEAR := '&YEAR';
	IF(MOD(YEAR,400) = 0 OR MOD(YEAR,4) = 0 OR MOD(YEAR,100)=0) THEN 
	DBMS_OUTPUT.PUT_LINE(YEAR || ' IS A LEAP YEAR');
	ELSE 
	DBMS_OUTPUT.PUT_LINE(YEAR || ' IS NOT A LEAP YEAR');
	END IF;
	
	END;
/

2: DECLARE
	NUM number(20);
	 REVER number(20);
	TEMP number(20);

BEGIN
	DBMS_OUTPUT.PUT_LINE('NUMBER : \n');
	NUM := &NUM;
	REVER := 0;
	TEMP := NUM;

	LOOP
		EXIT WHEN TEMP = 0;
			REVER := REVER * 10;
			REVER := REVER + MOD(TEMP,10);
			TEMP := TRUNC(TEMP/10);
		END LOOP;
	IF REVER = NUM THEN 
	DBMS_OUTPUT.PUT_LINE(NUM || ' IS A PALINDROME NUMBER\n');
	ELSE 
	DBMS_OUTPUT.PUT_LINE(NUM || ' IS NOT A PALINDROME NUMBER\n');
	END IF;
END;
/

3: DECLARE
	NUM number(5);
	SUM1 number(5);
	TEMP number(5);
	REMAINDER number(5);
BEGIN
	
	DBMS_OUTPUT.PUT_LINE('NUMBER : \n');
	NUM := &NUM;
	TEMP := NUM;
	SUM1 := 0;
	LOOP
		EXIT WHEN TEMP = 0;
				REMAINDER := MOD(TEMP,10);
				SUM1 := SUM1 + REMAINDER* REMAINDER * REMAINDER;
				TEMP := TRUNC(TEMP / 10);
	END LOOP;
	IF SUM1 = NUM THEN 
		DBMS_OUTPUT.PUT_LINE( NUM || ' IS A AMSTRONG NUMBER\n');
	ELSE 
		DBMS_OUTPUT.PUT_LINE( NUM || ' IS NOT A AMSTRONG NUMBER\n');
	END IF;
END;

/

4: DECLARE
	X number(3);
	Y number(3);
	Z number(3);
	I number(3);
	J number(3);
	K number(3);
	L number(3);
	M number(3);
	N number(3);
	G number(3);
BEGIN
	DBMS_OUTPUT.PUT_LINE('ENTER X : \n');
	X := &X;
	DBMS_OUTPUT.PUT_LINE('ENTER Y : \n');
	Y :=&y;
	DBMS_OUTPUT.PUT_LINE('ENTER Z : \n');
	Z :=&Z;
	
	IF (X>Y) THEN 
	J := X;
	K := Y;
	ELSE 
	J := Y;
	K := X;
	END IF;
	
	
	L := MOD(J,K);

	IF (L>Z)	THEN 
	M := L;
	N := Z;
	ELSE 
	M := Z;
	N := L;
	END IF;

	G := (M/N);
	
	DBMS_OUTPUT.PUT_LINE(G || ' IS THE GCD OF THREE NUM\n');
END;

/

5: DECLARE
	X number(3);
	Y number(3);
	Z number(3);
	MAX1 number(3);
	FLAG number(3);
	COUNT1 number(3);
	LCOM number(3);
BEGIN
	X :=&M;
	Y :=&N;
	Z :=&P;
	FLAG := 0;
	LCOM := 1;
	COUNT1 := 1;
	
	IF X >Y AND X >Z THEN
		MAX1 := X;

	ELSIF Y >X AND Y >Z THEN
		MAX1 := Y;

	ELSIF Z >X AND Z >Y THEN
		MAX1 := Z;
	END IF;

	LOOP
		EXIT WHEN FLAG = 1;
			LCOM :=MAX1*COUNT1;
			COUNT1 := COUNT1 +1;
			IF (MOD(LCOM,X) = 0 AND MOD(LCOM,Y) = 0 AND MOD(LCOM, Z) = 0) THEN
				FLAG := 1;
				DBMS_OUTPUT.PUT_LINE(LCOM || ' IS THE LCM OF THREE NUMBERS\n');
			END IF;
	END LOOP;
END;

/

6: DECLARE
	ACC_NO VARCHAR2(10);
	AMOUNT1 number(8,2);
BEGIN
	ACC_NO := &ACC_NO;
	SELECT AMOUNT INTO AMOUNT1 FROM DEPOSIT WHERE ACT_NO = ACC_NO;
	IF(AMOUNT1 < 5000) THEN
		UPDATE DEPOSIT SET AMOUNT = (AMOUNT+2000)
		WHERE ACT_NO = ACC_NO;
	END IF;
END;
/

7: (A):
CREATE TABLE EMP (NAME VARCHAR2(10), SALARY NUMBER(8,2),SSN NUMBER(4) PRIMARY KEY);
INSERT INTO EMP
VALUES('KOUSHIK',100000.00,0001);
INSERT INTO EMP
VALUES('TANMOY',15000.00,0002);
INSERT INTO EMP
VALUES('ARIJIT',12000.00,0003);
INSERT INTO EMP
VALUES('RAM',14000.00,0004);
INSERT INTO EMP
VALUES('SAM',13250.00,0005);

DECLARE
	ENAME VARCHAR2(10);
	ECODE NUMBER(4);
BEGIN
	ECODE := &ECODE;
	SELECT NAME INTO ENAME FROM EMP WHERE ECODE = SSN;
	DBMS_OUTPUT.PUT_LINE('THE EMPLOYE NAME IS '|| ENAME);
END;
/

7 : (B)
	DECLARE
	ENAME VARCHAR2(13);
	NEWCODE VARCHAR2(5);
	NEWNAME VARCHAR2(12);
	NEWSAL NUMBER(6,2);
BEGIN
	NEWCODE :='&NEWCODE';
	NEWNAME := '&NEWNAME;
	NEWSAL :='&NEWSAL';
	SELECT NAME INTO ENAME FROM EMP
		WHERE CODE = NEWCODE;
	DBMS_OUTPUT.PUT_LINE('DUPLICATE CODE IS NOT ALLOWED '||ENAME);	
	EXCEPTION
		WHEN NO_DATA _FOUND THEN
		INSERT INTO EMP 
		VALUES (NEWCODE, NEWNAME, NEWSAL);
END;
/	

8:  DECLARE
	BRANCH VARCHAR2(4) :='&BRANCH';	
 BEGIN
 	DELETE FROM BORROW
	WHERE BRANCH LIKE B_NAME;
	DBMS_OUTPUT.PUT_LINE('Number of Rows Deleted: '||sql%rowcount);
END;
/